generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String           @id @default(cuid())
    email           String           @unique
    name            String?
    password        String
    role            UserRole         @default(STUDENT)
    feedbacks       Feedback[]
    comments        Comment[]
    documents       Document[]
    groups          GroupMember[]
    ownedGroups     Group[]          @relation("GroupAdmin")
    wordSuggestions WordSuggestion[]
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

model Group {
    id          String        @id @default(cuid())
    name        String
    description String?
    joinToken   String        @unique
    adminId     String
    admin       User          @relation("GroupAdmin", fields: [adminId], references: [id])
    members     GroupMember[]
    documents   Document[]
    feedbacks   Feedback[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}
    
model GroupMember {
    id       String   @id @default(cuid())
    userId   String
    user     User     @relation(fields: [userId], references: [id])
    groupId  String
    group    Group    @relation(fields: [groupId], references: [id])
    joinedAt DateTime @default(now())

    @@unique([userId, groupId])
}

model Document {
    id               String   @id @default(cuid())
    title            String
    content          String   @default("")
    parentDocumentId String?
    versionNumber    Int      @default(1)
    isLatest         Boolean  @default(true)
    fileName         String
    fileUrl          String
    fileType         String
    fileSize         Int
    groupId          String?
    userId           String
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    parent          Document?        @relation("DocumentVersions", fields: [parentDocumentId], references: [id])
    versions        Document[]       @relation("DocumentVersions")
    group           Group?           @relation(fields: [groupId], references: [id])
    user            User             @relation(fields: [userId], references: [id])
    feedbacks       Feedback[]
    comments        Comment[]
    wordSuggestions WordSuggestion[]
}

model Feedback {
    id         String         @id @default(cuid())
    content    String
    aiScore    Float? // AI confidence score
    status     FeedbackStatus @default(PENDING)
    response   String?
    userId     String
    user       User           @relation(fields: [userId], references: [id])
    documentId String?
    document   Document?      @relation(fields: [documentId], references: [id])
    groupId    String?
    group      Group?         @relation(fields: [groupId], references: [id])
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    Comment    Comment[]
}

model Comment {
    id         String    @id @default(cuid())
    content    String
    userId     String
    user       User      @relation(fields: [userId], references: [id])
    documentId String
    document   Document  @relation(fields: [documentId], references: [id])
    feedbackId String?
    feedback   Feedback? @relation(fields: [feedbackId], references: [id])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model WordSuggestion {
    id            String    @id @default(cuid())
    documentId    String
    document      Document  @relation(fields: [documentId], references: [id])
    userId        String // User who accepts/rejects the suggestion
    user          User      @relation(fields: [userId], references: [id])
    originalWord  String // Original word like "hi"
    suggestedWord String // AI suggested word like "hey"
    position      Int // Position index in the document
    startOffset   Int // Start character position
    endOffset     Int // End character position
    highlighted   Boolean   @default(true) // Whether to highlight this suggestion in UI
    isAccepted    Boolean? // null = pending, true = accepted, false = rejected
    context       String? // Surrounding text for context (e.g., "I am sahil Revankar")
    aiConfidence  Float? // AI's confidence in this suggestion
    acceptedAt    DateTime? // When the suggestion was accepted (if it was)
    createdAt     DateTime  @default(now()) // When the suggestion was created
    updatedAt     DateTime  @updatedAt
}

enum UserRole {
    STUDENT
    TEACHER
    ADMIN
}

enum FeedbackStatus {
    PENDING
    ANALYZED
    REVIEWED
}
