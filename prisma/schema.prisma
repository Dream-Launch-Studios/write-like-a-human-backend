generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String        @id @default(cuid())
    email       String        @unique
    name        String?
    role        UserRole      @default(STUDENT)
    feedbacks   Feedback[]
    comments    Comment[]
    documents   Document[]
    groups      GroupMember[]
    ownedGroups Group[]       @relation("GroupAdmin")
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model Group {
    id          String        @id @default(cuid())
    name        String
    description String?
    joinToken   String        @unique
    adminId     String
    admin       User          @relation("GroupAdmin", fields: [adminId], references: [id])
    members     GroupMember[]
    documents   Document[]
    feedbacks   Feedback[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
}

model GroupMember {
    id       String   @id @default(cuid())
    userId   String
    user     User     @relation(fields: [userId], references: [id])
    groupId  String
    group    Group    @relation(fields: [groupId], references: [id])
    joinedAt DateTime @default(now())

    @@unique([userId, groupId])
}

model Document {
    id                 String     @id @default(cuid())
    title              String
    fileName           String
    fileUrl            String
    fileType           String
    fileSize           Int
    version            Int        @default(1)
    isLatest           Boolean    @default(true)
    originalDocumentId String?
    originalDocument   Document?  @relation("DocumentVersions", fields: [originalDocumentId], references: [id])
    versions           Document[] @relation("DocumentVersions")
    groupId            String
    group              Group      @relation(fields: [groupId], references: [id])
    userId             String
    user               User       @relation(fields: [userId], references: [id])
    feedbacks          Feedback[]
    comments           Comment[]
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
}

model Feedback {
    id         String         @id @default(cuid())
    content    String
    aiScore    Float? // AI confidence score
    status     FeedbackStatus @default(PENDING)
    response   String?
    userId     String
    user       User           @relation(fields: [userId], references: [id])
    documentId String?
    document   Document?      @relation(fields: [documentId], references: [id])
    groupId    String
    group      Group          @relation(fields: [groupId], references: [id])
    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    Comment    Comment[]
}

model Comment {
    id         String    @id @default(cuid())
    content    String
    userId     String
    user       User      @relation(fields: [userId], references: [id])
    documentId String
    document   Document  @relation(fields: [documentId], references: [id])
    feedbackId String?
    feedback   Feedback? @relation(fields: [feedbackId], references: [id])
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

enum UserRole {
    STUDENT
    TEACHER
    ADMIN
}

enum FeedbackStatus {
    PENDING
    ANALYZED
    REVIEWED
}
